<?php

/**
 * yzAjaxValidation actions.
 *
 * This module receives AJAX requests from forms and returns the validation results via JSON
 
 * @package    sfYzAjaxValidationPlugin
 * @author     Yining Zhao
 */
class yzAjaxValidationActions extends sfActions
{
  /**
   * All of the work is done in the index action. 
   *
   */
  public function executeIndex()
  {
    //These are the the routing information that is contained in 2 of the hidden fields generated by the yzValidation helpers
	$moduleName=$this->getRequestParameter('yzValidator_destination_module');
    $actionName=$this->getRequestParameter('yzValidator_destination_action');

    //Now we start the validation process. Looked in the sfController as well as the sfExecution filter classes
	$context=$this->getContext();
    //Creates an instance of the the action we want to validate
    $actionInstance = $this->getController()->getAction($moduleName, $actionName);
    $actionInstance->initialize($this->context);
    
    
    $validated = true;
    
    //Code from sfExecution Filter that deals with validating the action
    // get the current action validation configuration
    $validationConfig = $moduleName.'/'.sfConfig::get('sf_app_module_validate_dir_name').'/'.$actionName.'.yml';

    // load validation configuration
    // do NOT use require_once
    if (null !== $validateFile = sfConfigCache::getInstance()->checkConfig(sfConfig::get('sf_app_module_dir_name').'/'.$validationConfig, true))
    {
      // create validator manager
      $validatorManager = new sfValidatorManager();
      $validatorManager->initialize($context);

      require($validateFile);

      // process validators
      $validated = $validatorManager->execute();
    }

    // process manual validation
    $validateToRun = 'validate'.ucfirst($actionName);
    $manualValidated = method_exists($actionInstance, $validateToRun) ? $actionInstance->$validateToRun() : $actionInstance->validate();

    // action is validated if:
    // - all validation methods (manual and automatic) return true
    // - or automatic validation returns false but errors have been 'removed' by manual validation
    $validated = ($manualValidated && $validated) || ($manualValidated && !$validated && !$context->getRequest()->hasErrors());
    //After the target action has been validated, we put it into JSON format
	$errors = $actionInstance->getRequest()->getErrors();
    $errors_name= array_keys($errors);
    $num_errors = count($errors);
    $JSON_output_ary = array();
	for($i=0;$i<$num_errors;$i++)
    {
      $error_name = $errors_name[$i];
	  $error_message = $errors[$error_name];
      //Format the error message
	  //Borrowed code from form_error() in ValidationHelper.php
	  $prefix = sfConfig::get('sf_validation_error_prefix', '');
	  if (isset($options['prefix']))
	  {
		$prefix = $options['prefix'];
		unset($options['prefix']);
	  }
	
	  $suffix = sfConfig::get('sf_validation_error_suffix', '');
	  if (isset($options['suffix']))
	  {
		$suffix = $options['suffix'];
		unset($options['suffix']);
	  }
	  $error_message = $prefix.$error_message.$suffix;
	  //Convert name of field with error into the id of its form_error <div>
	  //Borrowed code from get_id_from_name() in FormHelper.php and form_error() in ValidationHelper.php
	  $error_name = str_replace(array('{}', '}{', '{', '}'), array('', '_', '_', ''), $error_name);
      $error_name = sfConfig::get('sf_validation_error_id_prefix', 'error_for_').$error_name;
	  $JSON_output_ary[] = "['$error_name','$error_message']";
    }
    $JSON_output = '['.implode(',',$JSON_output_ary).']';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$JSON_output.')');
	return sfView::HEADER_ONLY;
  }
}
